# Zone 2: Security & Monitoring
# Complete observability and security stack
# Can be deployed standalone or as part of megamonolith

version: '3.8'

services:
  # Wazuh Manager - SIEM/EDR Core
  wazuh-manager:
    image: wazuh/wazuh-manager:latest
    container_name: wazuh-manager
    restart: unless-stopped
    ports:
      - "${WAZUH_REGISTRATION_PORT:-1514}:1514"    # Agent registration
      - "${WAZUH_CLUSTER_PORT:-1516}:1516"         # Cluster daemon
      - "${WAZUH_API_PORT:-55000}:55000"           # Wazuh API
    environment:
      - INDEXER_URL=https://wazuh-indexer:9200
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD}
      - FILEBEAT_SSL_VERIFICATION_MODE=full
      - SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/root-ca.pem
      - SSL_CERTIFICATE=/etc/ssl/filebeat.pem
      - SSL_KEY=/etc/ssl/filebeat.key
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
      - filebeat_etc:/etc/filebeat
      - filebeat_var:/var/lib/filebeat
    networks:
      - zone2

  # Wazuh Indexer (OpenSearch)
  wazuh-indexer:
    image: wazuh/wazuh-indexer:latest
    container_name: wazuh-indexer
    restart: unless-stopped
    ports:
      - "${WAZUH_INDEXER_PORT:-9200}:9200"
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
      - "discovery.type=single-node"
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - wazuh_indexer_data:/var/lib/wazuh-indexer
    networks:
      - zone2

  # Wazuh Dashboard
  wazuh-dashboard:
    image: wazuh/wazuh-dashboard:latest
    container_name: wazuh-dashboard
    restart: unless-stopped
    ports:
      - "${WAZUH_DASHBOARD_PORT:-443}:5601"
    environment:
      - INDEXER_USERNAME=admin
      - INDEXER_PASSWORD=${WAZUH_INDEXER_PASSWORD}
      - WAZUH_API_URL=https://wazuh-manager
      - DASHBOARD_USERNAME=kibanaserver
      - DASHBOARD_PASSWORD=${WAZUH_DASHBOARD_PASSWORD}
      - API_USERNAME=wazuh-wui
      - API_PASSWORD=${WAZUH_API_PASSWORD}
    volumes:
      - wazuh_dashboard_config:/usr/share/wazuh-dashboard/data/wazuh/config
      - wazuh_dashboard_custom:/usr/share/wazuh-dashboard/plugins/wazuh/public/assets/custom
    depends_on:
      - wazuh-indexer
    networks:
      - zone2

  # Tetragon - eBPF Security Observability
  tetragon:
    image: cilium/tetragon:latest
    container_name: tetragon
    restart: unless-stopped
    privileged: true
    pid: host
    ports:
      - "${TETRAGON_GRPC_PORT:-2112}:2112"
      - "${TETRAGON_METRICS_PORT:-2113}:2113"
    volumes:
      - /sys/kernel/btf/vmlinux:/var/lib/tetragon/btf
      - tetragon_data:/var/lib/tetragon
    command:
      - /usr/bin/tetragon
      - --btf=/var/lib/tetragon/btf
      - --export-filename=/var/lib/tetragon/tetragon.log
      - --metrics-server=:2113
    networks:
      - zone2

  # Netbox - IPAM/DCIM
  netbox:
    image: netboxcommunity/netbox:latest
    container_name: netbox
    restart: unless-stopped
    ports:
      - "${NETBOX_PORT:-8000}:8080"
    environment:
      SUPERUSER_NAME: ${NETBOX_SUPERUSER_NAME:-admin}
      SUPERUSER_EMAIL: ${NETBOX_SUPERUSER_EMAIL:-admin@example.com}
      SUPERUSER_PASSWORD: ${NETBOX_SUPERUSER_PASSWORD}
      SUPERUSER_API_TOKEN: ${NETBOX_API_TOKEN}
      ALLOWED_HOSTS: ${NETBOX_ALLOWED_HOSTS:-*}
      DB_HOST: netbox-db
      DB_NAME: netbox
      DB_USER: netbox
      DB_PASSWORD: ${NETBOX_DB_PASSWORD}
      REDIS_HOST: netbox-redis
      REDIS_PASSWORD: ${NETBOX_REDIS_PASSWORD}
      SECRET_KEY: ${NETBOX_SECRET_KEY}
    depends_on:
      - netbox-db
      - netbox-redis
    volumes:
      - netbox_media:/opt/netbox/netbox/media
      - netbox_reports:/opt/netbox/netbox/reports
      - netbox_scripts:/opt/netbox/netbox/scripts
    networks:
      - zone2

  netbox-db:
    image: postgres:16-alpine
    container_name: netbox-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: netbox
      POSTGRES_USER: netbox
      POSTGRES_PASSWORD: ${NETBOX_DB_PASSWORD}
    volumes:
      - netbox_db_data:/var/lib/postgresql/data
    networks:
      - zone2

  netbox-redis:
    image: redis:7-alpine
    container_name: netbox-redis
    restart: unless-stopped
    command: redis-server --requirepass ${NETBOX_REDIS_PASSWORD}
    volumes:
      - netbox_redis_data:/data
    networks:
      - zone2

  # Prometheus - Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - zone2

  # Loki - Logs
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    networks:
      - zone2

  # Tempo - Traces
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: unless-stopped
    ports:
      - "${TEMPO_PORT:-3200}:3200"
      - "${TEMPO_OTLP_GRPC_PORT:-4317}:4317"
      - "${TEMPO_OTLP_HTTP_PORT:-4318}:4318"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/var/tempo
    networks:
      - zone2

  # Mimir - Long-term metrics storage
  mimir:
    image: grafana/mimir:latest
    container_name: mimir
    restart: unless-stopped
    ports:
      - "${MIMIR_PORT:-9009}:9009"
    command:
      - -config.file=/etc/mimir.yaml
    volumes:
      - ./mimir.yaml:/etc/mimir.yaml:ro
      - mimir_data:/data
    networks:
      - zone2

  # Pyroscope - Continuous Profiling
  pyroscope:
    image: grafana/pyroscope:latest
    container_name: pyroscope
    restart: unless-stopped
    ports:
      - "${PYROSCOPE_PORT:-4040}:4040"
    volumes:
      - pyroscope_data:/var/lib/pyroscope
    networks:
      - zone2

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: ${GRAFANA_INSTALL_PLUGINS:-}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus
      - loki
      - tempo
      - mimir
    networks:
      - zone2

volumes:
  # Wazuh
  wazuh_api_configuration:
  wazuh_etc:
  wazuh_logs:
  wazuh_queue:
  wazuh_var_multigroups:
  wazuh_integrations:
  wazuh_active_response:
  wazuh_agentless:
  wazuh_wodles:
  filebeat_etc:
  filebeat_var:
  wazuh_indexer_data:
  wazuh_dashboard_config:
  wazuh_dashboard_custom:

  # Tetragon
  tetragon_data:

  # Netbox
  netbox_media:
  netbox_reports:
  netbox_scripts:
  netbox_db_data:
  netbox_redis_data:

  # Observability
  prometheus_data:
  loki_data:
  tempo_data:
  mimir_data:
  pyroscope_data:
  grafana_data:

networks:
  zone2:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
