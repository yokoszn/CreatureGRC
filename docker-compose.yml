version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: grc-postgres
    environment:
      POSTGRES_DB: grc_platform
      POSTGRES_USER: grc_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grc_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:latest
    container_name: grc-temporal
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "7233:7233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_SEEDS=postgres
      - POSTGRES_USER=grc_user
      - POSTGRES_PWD=${DB_PASSWORD}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    volumes:
      - temporal_data:/etc/temporal

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:latest
    container_name: grc-temporal-ui
    depends_on:
      - temporal
    ports:
      - "8080:8080"
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000

  # Temporal Worker (runs workflows)
  temporal-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: grc-temporal-worker
    depends_on:
      - temporal
      - postgres
    environment:
      - TEMPORAL_HOST=temporal:7233
      - DATABASE_URL=postgresql://grc_user:${DB_PASSWORD}@postgres/grc_platform
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - evidence_data:/var/lib/grc/evidence
    command: python temporal_workflows.py

  # LiteLLM Proxy (Multi-LLM Gateway)
  litellm:
    image: ghcr.io/berriai/litellm:latest
    container_name: grc-litellm
    ports:
      - "4000:4000"
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
    volumes:
      - ./litellm_config.yaml:/app/config.yaml:ro
    command: --config /app/config.yaml

  # Obot Workflow Engine
  obot:
    image: obot/obot:latest
    container_name: grc-obot
    ports:
      - "9000:9000"
    environment:
      - DATABASE_URL=postgresql://grc_user:${DB_PASSWORD}@postgres/grc_platform
      - LITELLM_URL=http://litellm:4000
    volumes:
      - ./obot_workflows:/app/workflows:ro
    depends_on:
      postgres:
        condition: service_healthy

  # GRC API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: grc-api
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - litellm
    environment:
      - DATABASE_URL=postgresql://grc_user:${DB_PASSWORD}@postgres/grc_platform
      - LITELLM_URL=http://litellm:4000
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - evidence_data:/var/lib/grc/evidence
      - audit_packages:/var/lib/grc/audit-packages
    command: uvicorn api:app --host 0.0.0.0 --port 8000 --reload

  # Trust Center Web UI (optional)
  trust-center:
    build:
      context: ./trust-center
      dockerfile: Dockerfile
    container_name: grc-trust-center
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://api:8000
      - PUBLIC_URL=https://compliance.example.com
    depends_on:
      - api

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: grc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - trust-center
      - temporal-ui

volumes:
  postgres_data:
    driver: local
  temporal_data:
    driver: local
  evidence_data:
    driver: local
  audit_packages:
    driver: local

networks:
  default:
    name: grc-network
