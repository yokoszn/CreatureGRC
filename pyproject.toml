# CreatureGRC - Unified Package with Workspace Architecture
#
# This project uses uv workspaces to organize code into focused packages
# but ships as a single installable: `pip install creaturegrc`
#
# Deployment modes:
# - pip install creaturegrc[agent]   # Lightweight, export-only
# - pip install creaturegrc[server]  # Full platform with database
# - docker compose up                # Server deployment

[project]
name = "creaturegrc"
version = "2.0.0"
description = "Open-source compliance automation platform connecting infrastructure to security controls"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "CreatureGRC Contributors", email = "security@creaturegrc.dev"}
]
keywords = [
    "compliance",
    "grc",
    "security",
    "soc2",
    "iso27001",
    "nist",
    "audit",
    "infrastructure",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core dependencies (both agent and server)
dependencies = [
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "click>=8.1.7",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "httpx>=0.26.0",
    "toml>=0.10.2",
    "keyring>=24.3.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
# Agent mode: minimal scanner dependencies
agent = [
    "paramiko>=3.4.0",      # SSH connections
    "requests>=2.31.0",     # HTTP APIs
    "boto3>=1.34.0",        # AWS SDK (optional scanner)
]

# Server mode: full platform dependencies
server = [
    "psycopg2-binary>=2.9.9",
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.0",      # Database migrations
    "temporalio>=1.5.0",    # Workflow orchestration
    "celery>=5.3.4",        # Task queue
    "redis>=5.0.1",         # Cache and queue backend
]

# Development dependencies
dev = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.3",
    "pytest-mock>=3.12.0",
    "mypy>=1.8.0",
    "ruff>=0.1.14",
    "black>=24.1.0",
    "pre-commit>=3.6.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.4",
    "mkdocstrings[python]>=0.24.0",
]

# All dependencies (for development)
all = [
    "creaturegrc[agent,server,dev,docs]",
]

[project.scripts]
creaturegrc = "creaturegrc.cli:app"

[project.urls]
Homepage = "https://github.com/yokoszn/CreatureGRC"
Documentation = "https://yokoszn.github.io/CreatureGRC"
Repository = "https://github.com/yokoszn/CreatureGRC"
Issues = "https://github.com/yokoszn/CreatureGRC/issues"

# ==============================================================================
# UV Workspace Configuration
# ==============================================================================
[tool.uv.workspace]
members = [
    "packages/creature-ir",
    "packages/creature-dsl",
    "packages/creature-core",
    "packages/creature-plugins-*",
    "packages/creature-data-*",
]

[tool.uv.sources]
# Internal workspace packages
creature-ir = { workspace = true }
creature-dsl = { workspace = true }
creature-core = { workspace = true }

# ==============================================================================
# Build Configuration
# ==============================================================================
[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/creaturegrc"]
# Include workspace packages in the wheel
include = [
    "src/creaturegrc",
    "packages/*/src",
]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/packages",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
]

# ==============================================================================
# Testing Configuration
# ==============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=creaturegrc",
    "--cov=packages",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (require database)",
    "e2e: End-to-end tests (full system)",
    "conformance: Plugin conformance tests",
    "slow: Slow-running tests",
]

[tool.coverage.run]
source = ["src", "packages"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# ==============================================================================
# Type Checking Configuration
# ==============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "psycopg2.*",
    "temporalio.*",
    "celery.*",
]
ignore_missing_imports = true

# ==============================================================================
# Linting Configuration
# ==============================================================================
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # function calls in argument defaults (FastAPI Depends)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__ are re-exports
"tests/**" = ["S101"]     # Allow assert in tests

[tool.ruff.isort]
known-first-party = ["creaturegrc", "creature_ir", "creature_dsl", "creature_core"]

# ==============================================================================
# Black Configuration
# ==============================================================================
[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

# ==============================================================================
# Package Metadata
# ==============================================================================
[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
path = "src/creaturegrc/__init__.py"
